// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  currentRole String   @default("clipper") // 'clipper' | 'creator' - currently active role
  profilePicture String?  // Path to profile picture
  createdAt   DateTime @default(now())

  jobs        Job[]
  applications Application[]
  wallet       Wallet?
  campaigns    Campaign[]
  connectedAccounts ConnectedAccount[]
}

model Job {
  id          Int      @id @default(autoincrement())
  providerId  Int
  title       String
  description String
  videoLink   String
  reward      Float
  createdAt   DateTime @default(now())
  
  provider    User      @relation(fields: [providerId], references: [id])
  applications Application[]
}

model Application {
  id                Int      @id @default(autoincrement())
  jobId             Int
  applicantId       Int
  contributionScore Float?
  createdAt         DateTime @default(now())

  job        Job   @relation(fields: [jobId], references: [id])
  applicant  User  @relation(fields: [applicantId], references: [id])
}

model Wallet {
  id       Int      @id @default(autoincrement())
  userId   Int      @unique
  balance  Float    @default(0)
  user     User     @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  walletId    Int
  amount      Float
  type        String   // 'credit' | 'debit'
  description String
  createdAt   DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])
}

model Campaign {
  id          Int      @id @default(autoincrement())
  creatorId   Int
  name        String
  title       String   @default("")
  description String?
  videoLink   String?
  thumbnail   String?  // Path to campaign thumbnail
  budget      Float
  totalSpent  Float    @default(0)
  flatBudgetAmount        Float   @default(0)
  flatBudgetViews         Int     @default(0)
  performanceBudgetAmount Float   @default(0)
  performanceBudgetViews  Int     @default(0)
  platforms               String[] @default([])
  estimatedViews          Int     @default(0)
  startDate   DateTime @default(now())
  endDate     DateTime?
  status      String   @default("active") // 'active' | 'paused' | 'completed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User     @relation(fields: [creatorId], references: [id])
  clips       Clip[]
  analytics   CampaignAnalytics?
}

model Clip {
  id          Int      @id @default(autoincrement())
  campaignId  Int
  clipperId   Int
  title       String
  platform    String   // 'youtube' | 'instagram' | 'tiktok'
  videoUrl    String
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  rewardEarned Float   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaign    Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignAnalytics {
  id              Int      @id @default(autoincrement())
  campaignId      Int      @unique
  totalViews      Int      @default(0)
  totalLikes      Int      @default(0)
  totalShares     Int      @default(0)
  totalClippers   Int      @default(0)
  youtubeViews    Int      @default(0)
  instagramViews  Int      @default(0)
  tiktokViews     Int      @default(0)
  cpm             Float    @default(0) // Cost per thousand views
  demographics    String?  // JSON string with demographic data
  updatedAt       DateTime @updatedAt

  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model ConnectedAccount {
  id          Int      @id @default(autoincrement())
  userId      Int
  platform    String   // 'youtube' | 'instagram' | 'tiktok'
  username    String
  accountId   String   // Platform-specific account ID
  accessToken String?  // OAuth token (encrypted)
  refreshToken String? // OAuth refresh token (encrypted)
  connectedAt DateTime @default(now())
  isActive    Boolean  @default(true)

  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, platform])
}
